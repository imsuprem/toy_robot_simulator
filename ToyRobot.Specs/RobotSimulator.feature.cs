// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ToyRobot.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Robot Simulator")]
    public partial class RobotSimulatorFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RobotSimulator.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Robot Simulator", "\tIn order to Test the robot simulator\r\n\tAs a command dispatcher\r\n\tI want to be ab" +
                    "le to dispatch commands to the Robot", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No PLACE command issued")]
        [NUnit.Framework.CategoryAttribute("RobotSimulatorTag")]
        public virtual void NoPLACECommandIssued()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No PLACE command issued", new string[] {
                        "RobotSimulatorTag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have Initialised the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I have not issued any PLACE command yet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.When("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("the result should be \'Robot is not placed.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid PLACE command issued")]
        public virtual void InvalidPLACECommandIssued()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid PLACE command issued", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I have Initialised the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Commands"});
            table1.AddRow(new string[] {
                        "PLACE -1,0,NORTH"});
            table1.AddRow(new string[] {
                        "PLACE 0,-1,NORTH"});
            table1.AddRow(new string[] {
                        "PLACE 0,-0,HIGH"});
#line 17
 testRunner.When("I issue following commands to the robot", ((string)(null)), table1, "When ");
#line 22
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
    testRunner.Then("the result should be \'Robot is not placed.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Commands"});
            table2.AddRow(new string[] {
                        "PLACE 1,0,NORTH"});
            table2.AddRow(new string[] {
                        "PLACE 0,-1,NORTH"});
            table2.AddRow(new string[] {
                        "PLACE 0,-0,HIGH"});
#line 25
 testRunner.When("I issue following commands to the robot", ((string)(null)), table2, "When ");
#line 30
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
    testRunner.Then("the result should be \'1,0,NORTH\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Commands"});
            table3.AddRow(new string[] {
                        "PLACE 1,0,NORTH"});
            table3.AddRow(new string[] {
                        "PLACE 0,-1,NORTH"});
            table3.AddRow(new string[] {
                        "PLACE 0,-0,EAST"});
#line 33
 testRunner.When("I issue following commands to the robot", ((string)(null)), table3, "When ");
#line 38
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
    testRunner.Then("the result should be \'0,0,EAST\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid PLACE command issued")]
        public virtual void ValidPLACECommandIssued()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid PLACE command issued", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I have Initialised the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Commands"});
            table4.AddRow(new string[] {
                        "PLACE 1,0,NORTH"});
#line 45
 testRunner.When("I issue following commands to the robot", ((string)(null)), table4, "When ");
#line 48
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
    testRunner.Then("the result should be \'1,0,NORTH\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Commands"});
            table5.AddRow(new string[] {
                        "PLACE 5,5,EAST"});
#line 51
 testRunner.When("I issue following commands to the robot", ((string)(null)), table5, "When ");
#line 54
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
    testRunner.Then("the result should be \'5,5,EAST\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Commands"});
            table6.AddRow(new string[] {
                        "PLACE 5,0,EAST"});
#line 57
 testRunner.When("I issue following commands to the robot", ((string)(null)), table6, "When ");
#line 60
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 61
    testRunner.Then("the result should be \'5,0,EAST\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid MOVE command issued")]
        public virtual void ValidMOVECommandIssued()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid MOVE command issued", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("I have Initialised the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 65
 testRunner.And("I have placed the robot at origin facing EAST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 66
 testRunner.When("I issue a MOVE command to the robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 67
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.Then("the result should be \'1,0,EAST\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid MOVE command issued")]
        public virtual void InvalidMOVECommandIssued()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid MOVE command issued", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
 testRunner.Given("I have Initialised the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 72
 testRunner.And("I have placed the robot at origin facing WEST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.When("I issue a MOVE command to the robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.Then("the result should be \'0,0,WEST\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("LEFT command issued")]
        public virtual void LEFTCommandIssued()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("LEFT command issued", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
 testRunner.Given("I have Initialised the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 79
 testRunner.And("I have placed the robot at origin facing WEST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.When("I issue a LEFT command to the robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.Then("the result should be \'0,0,SOUTH\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("RIGHT command issued")]
        public virtual void RIGHTCommandIssued()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RIGHT command issued", ((string[])(null)));
#line 84
this.ScenarioSetup(scenarioInfo);
#line 85
 testRunner.Given("I have Initialised the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 86
 testRunner.And("I have placed the robot at origin facing WEST", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.When("I issue a RIGHT command to the robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.Then("the result should be \'0,0,NORTH\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Command Batches")]
        public virtual void TestCommandBatches()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Command Batches", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line 93
 testRunner.Given("I have Initialised the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Commands"});
            table7.AddRow(new string[] {
                        "PLACE 0,0,NORTH"});
            table7.AddRow(new string[] {
                        "MOVE"});
            table7.AddRow(new string[] {
                        "MOVE"});
            table7.AddRow(new string[] {
                        "MOVE"});
            table7.AddRow(new string[] {
                        "MOVE"});
            table7.AddRow(new string[] {
                        "MOVE"});
            table7.AddRow(new string[] {
                        "MOVE"});
#line 95
 testRunner.When("I issue following commands to the robot", ((string)(null)), table7, "When ");
#line 104
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 105
    testRunner.Then("the result should be \'0,5,NORTH\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Commands"});
            table8.AddRow(new string[] {
                        "PLACE 0,0,NORTH"});
            table8.AddRow(new string[] {
                        "MOVE"});
            table8.AddRow(new string[] {
                        "MOVE"});
            table8.AddRow(new string[] {
                        "MOVE"});
            table8.AddRow(new string[] {
                        "MOVE"});
            table8.AddRow(new string[] {
                        "MOVE"});
            table8.AddRow(new string[] {
                        "MOVE"});
            table8.AddRow(new string[] {
                        "RIGHT"});
            table8.AddRow(new string[] {
                        "MOVE"});
            table8.AddRow(new string[] {
                        "MOVE"});
            table8.AddRow(new string[] {
                        "MOVE"});
            table8.AddRow(new string[] {
                        "MOVE"});
            table8.AddRow(new string[] {
                        "MOVE"});
#line 107
 testRunner.When("I issue following commands to the robot", ((string)(null)), table8, "When ");
#line 122
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 123
    testRunner.Then("the result should be \'5,5,EAST\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Commands"});
            table9.AddRow(new string[] {
                        "PLACE 0,0,NORTH"});
            table9.AddRow(new string[] {
                        "MOVE"});
            table9.AddRow(new string[] {
                        "MOVE"});
            table9.AddRow(new string[] {
                        "MOVE"});
            table9.AddRow(new string[] {
                        "MOVE"});
            table9.AddRow(new string[] {
                        "MOVE"});
            table9.AddRow(new string[] {
                        "MOVE"});
            table9.AddRow(new string[] {
                        "RIGHT"});
            table9.AddRow(new string[] {
                        "MOVE"});
            table9.AddRow(new string[] {
                        "MOVE"});
            table9.AddRow(new string[] {
                        "MOVE"});
            table9.AddRow(new string[] {
                        "MOVE"});
            table9.AddRow(new string[] {
                        "MOVE"});
            table9.AddRow(new string[] {
                        "RIGHT"});
            table9.AddRow(new string[] {
                        "MOVE"});
#line 125
 testRunner.When("I issue following commands to the robot", ((string)(null)), table9, "When ");
#line 142
 testRunner.And("I issue a REPORT command to the Robot", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
    testRunner.Then("the result should be \'5,4,SOUTH\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
